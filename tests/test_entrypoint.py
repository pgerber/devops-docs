#!/usr/bin/python3
import ipaddress
import tempfile
import textwrap
import unittest
import entrypoint


class AccessControl(unittest.TestCase):

    def test_empty(self):
        addrs = entrypoint.extract_addresses('')
        self.assertIs(next(addrs, None), None)

    def test_ip_cidr_range(self):
        addrs = entrypoint.extract_addresses(' 81.221.15.78 123.0.0.0-123.0.0.17   188.122.45.16/28 ')
        self.assertEqual(
            list(addrs),
            list(map(ipaddress.ip_network, ['81.221.15.78', '123.0.0.0/28', '123.0.0.16/31', '188.122.45.16/28']))
        )

    def test_empty_file(self):
        with tempfile.NamedTemporaryFile('rt') as f:
            entrypoint.write_access_conf('', conf_file=f.name)
            self.assertEqual(f.read(), '# generated by Docker entrypoint script\n')

    def test_file(self):
        with tempfile.NamedTemporaryFile('rt') as f:
            entrypoint.write_access_conf('10.8.8.9 11.55.18.3 10.0.0.1-10.0.0.7 10.0.0.1/32 10.0.0.2', conf_file=f.name)
            self.assertEqual(
                f.read(),
                textwrap.dedent('''\
                    # generated by Docker entrypoint script
                    allow 10.8.8.9/32;
                    allow 11.55.18.3/32;
                    allow 10.0.0.1/32;
                    allow 10.0.0.2/31;
                    allow 10.0.0.4/30;
                    allow 10.0.0.1/32;
                    allow 10.0.0.2/32;
                    deny all;
                ''')
            )

    def test_invalid_address(self):
        with self.assertRaisesRegex(ValueError, 'does not appear to be an IPv4 or IPv6 network'):
            entrypoint.write_access_conf('10.8.8.9 11.55.18.3 10.0.0.1-10.0.0.7 10.0.0.256/32 10.0.0.2', conf_file='/')


if __name__ == '__main__':
    unittest.main()
